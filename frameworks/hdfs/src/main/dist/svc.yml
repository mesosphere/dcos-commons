name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{SERVICE_PRINCIPAL}}
  user: {{TASKCFG_ALL_TASK_USER}}
pods:
  journal:
    count: 3
    uris:
      - {{HDFS_URI}}
      - {{HDFS_BIN_URI}}
      - {{HDFS_JAVA_URI}}
      - {{BOOTSTRAP_URI}}
    {{#KERBEROS_ENABLED}}
    secrets:
      keytab:
        secret: {{KEYTAB_SECRET_PATH}}
        file: hdfs.keytab
    {{/KERBEROS_ENABLED}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    resource-sets:
      journal-resources:
        cpus: {{JOURNAL_CPUS}}
        memory: {{JOURNAL_MEM}}
        ports:
          journal-rpc:
            port: {{TASKCFG_ALL_JOURNAL_NODE_RPC_PORT}}
          journal-http:
            port: {{TASKCFG_ALL_JOURNAL_NODE_HTTP_PORT}}
          {{#TLS_ENABLED}}
          journal-https:
            port: {{TASKCFG_ALL_JOURNAL_NODE_HTTPS_PORT}}
          {{/TLS_ENABLED}}
        volume:
          path: journal-data
          size: {{JOURNAL_DISK}}
          type: {{JOURNAL_DISK_TYPE}}
    placement: {{JOURNAL_NODE_PLACEMENT}}
    tasks:
      bootstrap:
        goal: FINISHED
        cmd: >
          echo "Creating version directory in the journal-data persistent volume" &&
          mkdir -p journal-data/hdfs/current &&
          echo "Fetching VERSION file" &&
          curl $SCHEDULER_API_HOSTNAME/v1/state/files/VERSION > journal-data/hdfs/current/VERSION &&
          echo "VERSION has the following content:" &&
          cat journal-data/hdfs/current/VERSION
        resource-set: journal-resources
      node:
        goal: RUNNING
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs journalnode
        resource-set: journal-resources
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          hadoop-metrics2:
            template: journal-hadoop-metrics2.properties
            dest: {{HDFS_VERSION}}/etc/hadoop/hadoop-metrics2.properties
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          JOURNALNODE: true
        {{#JOURNAL_READINESS_CHECK_ENABLED}}
        # The absence of journal-data/hdfs indicates HDFS is about to be deployed for the first time.
        readiness-check:
          cmd: >
            if [ ! -d journal-data/hdfs ]; then
              exit 0
            else
              curl journal-$POD_INSTANCE_INDEX-node.$FRAMEWORK_HOST:$JOURNAL_NODE_HTTP_PORT/jmx > tmpJmx.json &&
              export LAGGING_TX_COUNT=$(grep "CurrentLagTxns" tmpJmx.json | sed s/,//g | awk '{print $3}') &&
              export WRITTEN_TX_COUNT=$(grep "TxnsWritten" tmpJmx.json | sed s/,//g | awk '{print $3}') &&
              if [ -f journal-data/hdfs/current/VERSION ] && [ ! -f journal-data/uploadedVersionFile ]; then
                curl -X PUT -F 'file=@journal-data/hdfs/current/VERSION' $SCHEDULER_API_HOSTNAME/v1/state/files/VERSION &&
                touch journal-data/uploadedVersionFile
              fi &&
              [[ $LAGGING_TX_COUNT -eq {{JOURNAL_LAGGING_TX_COUNT}} ]] && [[ $WRITTEN_TX_COUNT -gt 0 ]]
            fi
          delay: 30
          interval: 5
          timeout: 15
        {{/JOURNAL_READINESS_CHECK_ENABLED}}
        {{#TLS_ENABLED}}
        transport-encryption:
          - name: node
            type: KEYSTORE
        {{/TLS_ENABLED}}
  name:
    count: 2
    uris:
      - {{HDFS_URI}}
      - {{HDFS_BIN_URI}}
      - {{HDFS_JAVA_URI}}
      - {{BOOTSTRAP_URI}}
    {{#KERBEROS_ENABLED}}
    secrets:
      keytab:
        secret: {{KEYTAB_SECRET_PATH}}
        file: hdfs.keytab
    {{/KERBEROS_ENABLED}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    resource-sets:
      name-resources:
        cpus: {{NAME_CPUS}}
        memory: {{NAME_MEM}}
        volume:
          path: name-data
          size: {{NAME_DISK}}
          type: {{NAME_DISK_TYPE}}
        ports:
          name-rpc:
            port: {{TASKCFG_ALL_NAME_NODE_RPC_PORT}}
          name-http:
            port: {{TASKCFG_ALL_NAME_NODE_HTTP_PORT}}
          {{#TLS_ENABLED}}
          name-https:
            port: {{TASKCFG_ALL_NAME_NODE_HTTPS_PORT}}
          {{/TLS_ENABLED}}
      zkfc-resources:
        cpus: {{ZKFC_CPUS}}
        memory: {{ZKFC_MEM}}
        ports:
          zkfc-port:
            port: {{TASKCFG_ALL_ZKFC_PORT}}
    placement: {{NAME_NODE_PLACEMENT}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs namenode
        resource-set: name-resources
        readiness-check:
          cmd: >
            export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) &&
          {{#KERBEROS_ENABLED}}
            KRB5_CONFIG={{JRE_VERSION}}/lib/security/krb5.conf kinit -k -t $MESOS_SANDBOX/hdfs.keytab $KERBEROS_PRIMARY/$TASK_NAME.$FRAMEWORK_HOST@$KERBEROS_REALM &&
          {{/KERBEROS_ENABLED}}
            ./{{HDFS_VERSION}}/bin/hdfs haadmin -getServiceState $TASK_NAME
          interval: 5
          delay: 0
          timeout: 60
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          hadoop-metrics2:
            template: name-hadoop-metrics2.properties
            dest: {{HDFS_VERSION}}/etc/hadoop/hadoop-metrics2.properties
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          NAMENODE: true
        {{#TLS_ENABLED}}
        transport-encryption:
          - name: node
            type: KEYSTORE
        {{/TLS_ENABLED}}
      format:
        goal: FINISHED
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs namenode -format
        resource-set: name-resources
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          NAMENODE: true
      bootstrap:
        goal: FINISHED
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs namenode -bootstrapStandby -skipSharedEditsCheck
        resource-set: name-resources
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-bootstrap-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          NAMENODE: true
        {{#TLS_ENABLED}}
        transport-encryption:
          - name: node
            type: KEYSTORE
        {{/TLS_ENABLED}}
      zkfc:
        goal: RUNNING
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap --resolve-hosts $TASK_NAME.$FRAMEWORK_HOST && ./{{HDFS_VERSION}}/bin/hdfs zkfc
        resource-set: zkfc-resources
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          ZKFC: true
      zkfc-format:
        goal: FINISHED
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs zkfc -formatZK
        resource-set: zkfc-resources
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          ssl-client:
            template: ssl-client.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-client.xml
          {{/TLS_ENABLED}}
        env:
          ZKFC: true
  data:
    count: {{DATA_COUNT}}
    uris:
      - {{HDFS_URI}}
      - {{HDFS_BIN_URI}}
      - {{HDFS_JAVA_URI}}
      - {{BOOTSTRAP_URI}}
    {{#KERBEROS_ENABLED}}
    secrets:
      keytab:
        secret: {{KEYTAB_SECRET_PATH}}
        file: hdfs.keytab
    {{/KERBEROS_ENABLED}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
      {{/ENABLE_VIRTUAL_NETWORK}}
    placement: {{DATA_NODE_PLACEMENT}}
    tasks:
      node:
        goal: RUNNING
        cmd: >
              export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
              mv hdfs {{HDFS_VERSION}}/bin/ ;
              ./bootstrap && ./{{HDFS_VERSION}}/bin/hdfs datanode
        cpus: {{DATA_CPUS}}
        memory: {{DATA_MEM}}
        ports:
          data-rpc:
            port: {{TASKCFG_ALL_DATA_NODE_RPC_PORT}}
          data-http:
            port: {{TASKCFG_ALL_DATA_NODE_HTTP_PORT}}
          {{#TLS_ENABLED}}
          data-https:
            port: {{TASKCFG_ALL_DATA_NODE_HTTPS_PORT}}
          {{/TLS_ENABLED}}
          data-ipc:
            port: {{TASKCFG_ALL_DATA_NODE_IPC_PORT}}
        volume:
          path: data-data
          size: {{DATA_DISK}}
          type: {{DATA_DISK_TYPE}}
        configs:
          {{#KERBEROS_ENABLED}}
          krb5-conf:
            template: krb5.conf
            dest: {{JRE_VERSION}}/lib/security/krb5.conf
          {{/KERBEROS_ENABLED}}
          core-site:
            template: core-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/core-site.xml
          hdfs-site:
            template: hdfs-site.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/hdfs-site.xml
          hadoop-metrics2:
            template: data-hadoop-metrics2.properties
            dest: {{HDFS_VERSION}}/etc/hadoop/hadoop-metrics2.properties
          {{#TLS_ENABLED}}
          ssl-server:
            template: ssl-server.xml
            dest: {{HDFS_VERSION}}/etc/hadoop/ssl-server.xml
          {{/TLS_ENABLED}}
        env:
          DATANODE: true
        # If HDFS does not report a data node to be live, we don't consider the data node to be ready yet
        readiness-check:
          cmd: >
            export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) &&
          {{#KERBEROS_ENABLED}}
            KRB5_CONFIG={{JRE_VERSION}}/lib/security/krb5.conf kinit -k -t $MESOS_SANDBOX/hdfs.keytab $KERBEROS_PRIMARY/$TASK_NAME.$FRAMEWORK_HOST@$KERBEROS_REALM &&
          {{/KERBEROS_ENABLED}}
            export TASK_IP=$(./bootstrap --get-task-ip) && MATCH="$(./{{HDFS_VERSION}}/bin/hdfs dfsadmin -report | grep $TASK_IP | wc -l)" &&
            [[ $MATCH -ge 1 ]]
          interval: 10
          delay: 120
          timeout: 60
        {{#TLS_ENABLED}}
        transport-encryption:
          - name: node
            type: KEYSTORE
        {{/TLS_ENABLED}}
plans:
  deploy:
    strategy: serial
    phases:
      journal:
        strategy: {{DEPLOY_STRATEGY}}
        pod: journal
        steps:
          - 0: [[node]]
          - 1: [[node]]
          - 2: [[node]]
      name:
        strategy: serial
        pod: name
        steps:
          - 0: [[format], [node]]
          - 1: [[bootstrap], [node]]
      zkfc:
        strategy: serial
        pod: name
        steps:
          - 0: [[zkfc-format], [zkfc]]
          - 1: [[zkfc]]
      data:
        strategy: {{DEPLOY_STRATEGY}}
        pod: data
  update:
    strategy: serial
    phases:
      journal:
        strategy: {{UPDATE_STRATEGY}}
        pod: journal
        steps:
          - 0: [[node]]
          - 1: [[node]]
          - 2: [[node]]
      name:
        strategy: {{UPDATE_STRATEGY}}
        pod: name
        steps:
          - 0: [[node, zkfc]]
          - 1: [[node, zkfc]]
      data:
        strategy: serial
        pod: data

  replace:
    strategy: serial
    phases:
      journal:
        strategy: serial
        pod: journal
        steps:
          - 0: [[bootstrap], [node]]
          - 1: [[bootstrap], [node]]
          - 2: [[bootstrap], [node]]
      name:
        strategy: serial
        pod: name
        steps:
          - 0: [[bootstrap], [node, zkfc]]
          - 1: [[bootstrap], [node, zkfc]]
