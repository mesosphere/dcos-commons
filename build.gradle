// Config shared by the dcos-commons library and the examples:

plugins {
  id 'com.github.ksoichiro.console.reporter' version '0.4.0'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'maven-publish'
  apply plugin: 'com.github.ksoichiro.console.reporter'

  apply from: "$rootDir/gradle/quality.gradle"
  apply from: "$rootDir/gradle/spock.gradle"

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
  }

  idea {
    if (project.hasProperty('ideaParentDefined')) {
      project {
        jdkName = '1.8'
        languageLevel = '1.8'
        ipr {
          withXml { provider ->
            provider.node.component
              .find { it.@name == 'VcsDirectoryMappings' }
              .mapping.@vcs = 'Git'
          }
        }
      }
    }
  }

  // Print results on the fly
  test {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }

  // Include unit test report in 'check'
  // (jacoco itself depends on 'test')
  check.dependsOn jacocoTestReport
  jacocoTestReport {
    reports {
      html.destination "${buildDir}/jacoco"
    }
  }
}

// Config specific to the dcos-commons library:
apply plugin: 'application'

ext {
  jacksonVer = "2.6.3"
  commonsCollectionsVer = "3.2.2"
  commonsIoVer = "2.4"
  antlrVer = "4.5.1-1"
  restServiceVer = "2.0.1"
  guiceVer = "3.0"
  junitVer = "4.11"
  gsonVer = "2.3.1"
  mesosVer = "0.28.0"
  slf4jVer = "1.7.10"
  mockitoVer = "1.9.5"
  curatorVer = "2.9.1"
  powerMockVer = "1.6.4"
  dropwizardVer = "0.9.2"
  kryoVer = "3.0.3"
  kryoSerializersVer = "0.38"
}

group = "mesosphere"
version = "0.4.14-SNAPSHOT"

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

publishing {
  repositories {
    maven {
      if(project.version.endsWith('-SNAPSHOT')) {
        url "s3://downloads.mesosphere.io/maven-snapshot/"
      } else {
        url "s3://downloads.mesosphere.io/maven/"
      }
/*
      credentials(AwsCredentials) {
        accessKey System.env['AWS_ACCESS_KEY_ID']
        secretKey System.env['AWS_SECRET_ACCESS_KEY']
      }
*/
    }
    publications {
      mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
          classifier "sources"
        }
      }
    }
  }
}

configurations {
  runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVer}"
  compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVer}"
  compile "commons-collections:commons-collections:${commonsCollectionsVer}"
  compile "commons-io:commons-io:${commonsIoVer}"
  compile "org.antlr:antlr4-runtime:${antlrVer}"
  compile "javax.ws.rs:javax.ws.rs-api:${restServiceVer}"
  compile "org.apache.curator:curator-framework:${curatorVer}"
  compile "org.apache.curator:curator-recipes:${curatorVer}"
  compile "org.apache.mesos:mesos:${mesosVer}"
  compile "org.apache.commons:commons-lang3:3.4"
  compile "org.slf4j:log4j-over-slf4j:${slf4jVer}"
  compile "org.slf4j:jcl-over-slf4j:${slf4jVer}"
  compile "com.google.inject:guice:${guiceVer}"
  compile "com.google.inject.extensions:guice-assistedinject:${guiceVer}"
  compile "com.google.code.gson:gson:${gsonVer}"
  compile "com.esotericsoftware:kryo-shaded:${kryoVer}"
  compile "de.javakaffee:kryo-serializers:${kryoSerializersVer}"
  testCompile "io.dropwizard:dropwizard-testing:${dropwizardVer}"
  testCompile "org.mockito:mockito-all:${mockitoVer}"
  testCompile "org.powermock:powermock-mockito-release-full:${powerMockVer}"
  testCompile "org.apache.curator:curator-test:${curatorVer}"
}

distributions {
  main {
    mainClassName = ''
    baseName = 'dcos-commons'
  }
}
