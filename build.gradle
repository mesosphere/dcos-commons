// Config shared by the dcos-commons library and the examples:

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ksoichiro.console.reporter'

    apply from: "$rootDir/gradle/quality.gradle"

    // ---
    // To create a release release:
    // 1. Merge a PR with "-SNAPSHOT" suffix removed
    // 2. Merge a second PR which bumps the version with "-SNAPSHOT" suffix added back
    // For example, given a version of "1.2.3-SNAPSHOT", merge "1.2.3" then "1.2.4-SNAPSHOT".
    // ---
    // In general, users of this SDK should NOT depend on "-SNAPSHOT" builds, as they may break
    // at ANY TIME as changes are merged into master. They represent a fully unstable API.
    // ---
    group = "mesosphere"
    version = "0.11.1-SNAPSHOT"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        maven {
            url 'https://repository.apache.org/content/repositories/snapshots'
        }
        mavenLocal()
        mavenCentral()
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    compileTestJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

    task wrapper(type: Wrapper) {
        gradleVersion = '3.2'
    }

    idea {
        if (project.hasProperty('ideaParentDefined')) {
            project {
                jdkName = '1.8'
                languageLevel = '1.8'
                ipr {
                    withXml { provider ->
                        provider.node.component
                                .find { it.@name == 'VcsDirectoryMappings' }
                                .mapping.@vcs = 'Git'
                    }
                }
            }
        }
    }

    // Print results on the fly
    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task copyExecutor(type: Copy) {
        from('src/../../../sdk/executor/build/distributions/') {
            include '**/*'
        }
        into('build/distributions')
    }
}

ext {
    mesosVer = "1.2.0-SNAPSHOT"
}

subprojects {
    dependencies {
        compile "org.apache.mesos:mesos:${mesosVer}"
    }
}

shadowJar {
    classifier = 'uber'

    mergeServiceFiles()

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}
