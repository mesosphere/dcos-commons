plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

ext {
    commonsCollectionsVer = "3.2.2"
    commonsIoVer = "2.4"
    findbugsAnnotationsVer = "3.0.1u2"
    junitVer = "4.12"
    mockitoVer = "1.9.5"
    protobufVer = "3.3.1"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

// Configure the SDKBuildInfo class generator
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    exec {
        // Teamcity workaround: using 'git describe' to determine dirty status doesn't work there.
        commandLine '/bin/sh', '-c', 'if [ -n "$(git diff --name-only HEAD)" ]; then echo -dirty; fi'
        standardOutput = stdout
    }
    return stdout.toString().replace("\n", "")
}
buildConfig {
    packageName = 'com.mesosphere.sdk.generated'
    clsName = 'SDKBuildInfo'

    version = project.version // VERSION
    appName = project.group + '.' + project.name // NAME
    buildConfigField 'String', 'GIT_SHA', "${getGitHash()}"
    buildConfigField 'long', 'BUILD_TIME_EPOCH_MS', System.currentTimeMillis() + 'L'
}

publishing {
    repositories {
        maven {
            if(project.version.endsWith('-SNAPSHOT')) {
                url "s3://downloads.mesosphere.io/maven-snapshot/"
            } else {
                url "s3://downloads.mesosphere.io/maven/"
            }
            credentials(AwsCredentials) {
                accessKey System.env['AWS_ACCESS_KEY_ID']
                secretKey System.env['AWS_SECRET_ACCESS_KEY']
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId 'common'
                version project.version

                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }
}

dependencies {
    compile project(":api")
    compile "com.google.protobuf:protobuf-java:${protobufVer}"
    compile "commons-collections:commons-collections:${commonsCollectionsVer}"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    compile "commons-io:commons-io:${commonsIoVer}"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "com.google.code.findbugs:annotations:${findbugsAnnotationsVer}"
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    testCompile "junit:junit:${junitVer}"
    testCompile "org.mockito:mockito-all:${mockitoVer}"
}

// squelch code coverage report for this project
// check.finalizedBy jacocoTestReport
/*jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
*/
