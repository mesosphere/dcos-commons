name: {{SERVICE_NAME}}
scheduler:
  principal: {{SERVICE_PRINCIPAL}}
  user: {{SERVICE_USER}}
pods:
  node:
    count: {{NODES}}
    placement: "{{PLACEMENT_CONSTRAINT}}"
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    image: {{CASSANDRA_DOCKER_IMAGE}}
    volume:
      path: container-path
      type: {{CASSANDRA_DISK_TYPE}}
      size: {{CASSANDRA_DISK_MB}}
    uris:
      - {{CASSANDRA_JAVA_URI}}
      - {{SCHEDULER_URI}}
      - {{CASSANDRA_URI}}
      - {{BOOTSTRAP_URI}}
    resource-sets:
      server-resources:
        cpus: {{CASSANDRA_CPUS}}
        memory: {{CASSANDRA_MEMORY_MB}}
        ports:
          jmx:
            port: {{TASKCFG_ALL_JMX_PORT}}
          storage:
            port: {{TASKCFG_ALL_CASSANDRA_STORAGE_PORT}}
          ssl:
            port: {{TASKCFG_ALL_CASSANDRA_SSL_STORAGE_PORT}}
          node:
            port: {{TASKCFG_ALL_CASSANDRA_NATIVE_TRANSPORT_PORT}}
            advertise: true
            vip:
              prefix: node
              port: 9042
          rpc:
            port: {{TASKCFG_ALL_CASSANDRA_RPC_PORT}}
      sidecar-resources:
        cpus: 1
        memory: 1024
    tasks:
      server:
        goal: RUNNING
        resource-set: server-resources
        cmd: >
                ./bootstrap

                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
                ARGS='-f'

                if [ -n "$STATSD_UDP_HOST" ]; then
                    ARGS="$ARGS -Dcassandra.metricsReporterConfigFile=metrics-reporter-config.yaml"
                fi

                exec ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/cassandra $ARGS
        configs:
          cassandra:
            template: {{CONFIG_TEMPLATE_PATH}}/cassandra.yaml
            dest: apache-cassandra-{{CASSANDRA_VERSION}}/conf/cassandra.yaml
          jvm:
            template: {{CONFIG_TEMPLATE_PATH}}/jvm_{{CASSANDRA_HEAP_GC}}.options
            dest: apache-cassandra-{{CASSANDRA_VERSION}}/conf/jvm.options
          metrics:
            template: {{CONFIG_TEMPLATE_PATH}}/metrics-reporter-config.yaml
            dest: apache-cassandra-{{CASSANDRA_VERSION}}/conf/metrics-reporter-config.yaml
          rack:
            template: {{CONFIG_TEMPLATE_PATH}}/cassandra-rackdc.properties
            dest: apache-cassandra-{{CASSANDRA_VERSION}}/conf/cassandra-rackdc.properties
          s3:
            template: {{CONFIG_TEMPLATE_PATH}}/s3config.json
            dest: s3config.json
        readiness-check:
          cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
                export TASK_IP=$(./bootstrap --get-task-ip) && ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/nodetool status -p {{TASKCFG_ALL_JMX_PORT}} | grep -q "UN  $TASK_IP"
          interval: 5
          delay: 0
          timeout: 60
      repair:
        goal: FINISHED
        cmd: export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) && ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/nodetool repair -pr -p ${JMX_PORT} -- $CASSANDRA_KEYSPACE
        resource-set: sidecar-resources
      cleanup:
        goal: FINISHED
        cmd: export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) && ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/nodetool cleanup -p ${JMX_PORT} -- $CASSANDRA_KEYSPACE
        resource-set: sidecar-resources
      backup-schema:
        goal: FINISHED
        cmd: >
                mkdir container-path/snapshot ;
                ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/cqlsh -e "DESC SCHEMA" "node-${POD_INSTANCE_INDEX}-server.${FRAMEWORK_HOST}" ${CASSANDRA_NATIVE_TRANSPORT_PORT} > container-path/snapshot/schema.cql
        resource-set: sidecar-resources
      snapshot:
        goal: FINISHED
        cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
                ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/nodetool snapshot -p ${JMX_PORT} -t "$SNAPSHOT_NAME" -- $(eval "echo $CASSANDRA_KEYSPACES")

                for f in $(find container-path/data/ -type d -name "$SNAPSHOT_NAME") ; do
                    qualified_table="$(echo "$f" | sed -E 's/[^\/]+\/[^\/]+\/([^\/]+)\/([^-]+)-.*/\1 \2/g')" ;
                    keyspace=$(echo "$qualified_table" | cut -d ' ' -f 1) ;
                    table=$(echo "$qualified_table" | cut -d ' ' -f 2) ;

                    mkdir -p container-path/snapshot/"$keyspace" ;
                    (cd container-path/snapshot/"$keyspace" && ln -s ../../../"$f" "$table") ;
                done
        resource-set: sidecar-resources
      upload-s3:
        goal: FINISHED
        cmd: aws s3 cp container-path/snapshot/ s3://${S3_BUCKET_NAME}/${SNAPSHOT_NAME}/node-${POD_INSTANCE_INDEX}/ --recursive
        resource-set: sidecar-resources
      upload-azure:
        goal: FINISHED
        cmd: >
                az login -u $CLIENT_ID --service-principal --tenant $TENANT_ID -p $CLIENT_SECRET

                (cd container-path && tar cvhzf snapshot.tar.gz snapshot/) ;
                az storage blob upload -c "$CONTAINER_NAME" -f container-path/snapshot.tar.gz -n node-${POD_INSTANCE_INDEX}.tar.gz
        resource-set: sidecar-resources
      cleanup-snapshot:
        goal: FINISHED
        cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
                ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/nodetool clearsnapshot -p ${JMX_PORT} -t "$SNAPSHOT_NAME" -- $(eval "echo $CASSANDRA_KEYSPACES") ;
                rm -r container-path/snapshot
        resource-set: sidecar-resources
      fetch-s3:
        goal: FINISHED
        cmd: >
                mkdir container-path/snapshot ;
                aws s3 cp s3://${S3_BUCKET_NAME}/${SNAPSHOT_NAME}/node-${POD_INSTANCE_INDEX} container-path/snapshot --recursive
        resource-set: sidecar-resources
      fetch-azure:
        goal: FINISHED
        cmd: >
                az login -u $CLIENT_ID --service-principal --tenant $TENANT_ID -p $CLIENT_SECRET

                az storage blob download -c "$CONTAINER_NAME" -f container-path/snapshot.tar.gz -n node-${POD_INSTANCE_INDEX}.tar.gz ;
                (cd container-path && tar xvzf snapshot.tar.gz)

                rm container-path/snapshot.tar.gz
        resource-set: sidecar-resources
      restore-schema:
        goal: FINISHED
        cmd: ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/cqlsh -e "source 'container-path/snapshot/schema.cql'" node-${POD_INSTANCE_INDEX}-server.${FRAMEWORK_HOST} ${CASSANDRA_NATIVE_TRANSPORT_PORT}
        resource-set: sidecar-resources
      restore-snapshot:
        goal: FINISHED
        cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jre*/) ;
                for f in $(find container-path/snapshot/ -maxdepth 1 -mindepth 1 -type d ! -name "system_*" ! -name "system") ; do
                    for t in $(find "$f" -maxdepth 1 -mindepth 1 -type d) ; do
                        ./apache-cassandra-{{CASSANDRA_VERSION}}/bin/sstableloader -f apache-cassandra-{{CASSANDRA_VERSION}}/conf/cassandra.yaml -d ${LOCAL_SEEDS} -p ${CASSANDRA_NATIVE_TRANSPORT_PORT} "$t" ;
                    done
                done

                rm -r container-path/snapshot
        resource-set: sidecar-resources
plans:
  deploy:
    strategy: serial
    phases:
      node-deploy:
        strategy: serial
        pod: node
        steps:
          - default: [[server]]
  replace:
    strategy: serial
    phases:
      node-deploy:
        strategy: serial
        pod: node
        steps:
          - default: [[server]]
  repair:
    strategy: serial
    phases:
      repair-deploy:
        strategy: serial
        pod: node
        steps:
          - default: [[repair]]
  cleanup:
    strategy: serial
    phases:
      cleanup-deploy:
        strategy: serial
        pod: node
        steps:
          - default: [[cleanup]]
  backup-s3:
    strategy: serial
    phases:
      backup-schema:
        strategy: serial
        pod: node
        steps:
          - default: [[backup-schema]]
      create-snapshots:
        strategy: parallel
        pod: node
        steps:
          - default: [[snapshot]]
      upload-backups:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[upload-s3]]
      cleanup-snapshots:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[cleanup-snapshot]]
  restore-s3:
    strategy: serial
    phases:
      fetch-s3:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[fetch-s3]]
      restore-schema:
        strategy: serial
        pod: node
        steps:
          - default: [[restore-schema]]
      restore-snapshots:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[restore-snapshot]]
  backup-azure:
    strategy: serial
    phases:
      backup-schema:
        strategy: serial
        pod: node
        steps:
          - default: [[backup-schema]]
      create-snapshots:
        strategy: parallel
        pod: node
        steps:
          - default: [[snapshot]]
      upload-backups:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[upload-azure]]
      cleanup-snapshots:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[cleanup-snapshot]]
  restore-azure:
    strategy: serial
    phases:
      fetch-azure:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[fetch-azure]]
      restore-schema:
        strategy: serial
        pod: node
        steps:
          - default: [[restore-schema]]
      restore-snapshots:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: node
        steps:
          - default: [[restore-snapshot]]
