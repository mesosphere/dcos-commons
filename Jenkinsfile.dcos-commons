#!/usr/bin/env groovy
// Configuration for https://jenkins.mesosphere.com/service/jenkins/job/dcos-commons%20docker%20image/

void setBuildStatus(String context, String message, String state) {
    step([
            $class: "GitHubCommitStatusSetter",
            contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
            reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/mesosphere/dcos-commons"],
            statusResultSource: [
                $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]
            ]
    ])
}

pipeline {
    agent {
        label 'dcos-commons'
    }
 
    environment {
        IMAGE = "dcos-commons"

        //Use GitHub PR-# to create new image tag.
        //This has values such as 'PR-2214'
        //'$IMAGE:$TAG' is then dcos-commons:PR-2214
        TAG = "${env.GIT_BRANCH}"

        DOCKERFILE = "Dockerfile"
 
        // Get credentials for publishing to Docker hub.
        DOCKER = credentials('docker-hub-credentials')
    }
 
    stages {

        stage('docker login') {
            steps {
                // Login to the Docker registry.
                sh("docker login -u ${DOCKER_USR} -p ${DOCKER_PSW}")
            }
        }
 
        stage('build') {
            steps {
                // Prevent indefinite hangs: DCOS-57576
                timeout(activity: true, time: 1, unit: 'HOURS') {
                    // Build Docker image.
                    sh("docker build --squash -f ${DOCKERFILE} -t mesosphere/${IMAGE}:${TAG} .")
                }
            }
        }
 
        stage('publish') {
            steps {
                script {
                    sh("docker push mesosphere/${IMAGE}:${TAG}")
                }
            }
        }
    }

    post {
      success {
          setBuildStatus("mesosphere/${IMAGE}", "Docker image build/push succeeded", "SUCCESS");
      }
      failure {
          setBuildStatus("mesosphere/${IMAGE}", "Docker image build/push failed", "FAILURE");
      }
      aborted {
          setBuildStatus("mesosphere/${IMAGE}", "Docker image build/push aborted", "ERROR");
      }
      unstable {
          setBuildStatus("mesosphere/${IMAGE}", "Docker image build/push unstable", "ERROR");
      }
    }
}
