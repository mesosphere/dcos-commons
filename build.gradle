// Config shared by the dcos-commons library and the examples:

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ksoichiro.console.reporter'

    apply from: "$rootDir/gradle/quality.gradle"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    compileTestJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

    task wrapper(type: Wrapper) {
        gradleVersion = '2.3'
    }

    idea {
        if (project.hasProperty('ideaParentDefined')) {
            project {
                jdkName = '1.8'
                languageLevel = '1.8'
                ipr {
                    withXml { provider ->
                        provider.node.component
                                .find { it.@name == 'VcsDirectoryMappings' }
                                .mapping.@vcs = 'Git'
                    }
                }
            }
        }
    }

    // Print results on the fly
    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    // Include unit test report in 'check'
    // (jacoco itself depends on 'test')
    check.dependsOn jacocoTestReport
    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'org/apache/mesos/testing/**')
            })
        }
        reports {
            html.destination "${buildDir}/jacoco"
        }
    }
}

shadowJar {
    classifier = 'uber'

    mergeServiceFiles()

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}
